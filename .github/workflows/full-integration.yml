name: Full Integration Testing (Tier 4)

on:
  schedule:
    # Monthly full integration tests
    - cron: '0 4 1 * *'
  workflow_dispatch:
    inputs:
      test_demo_processing:
        description: 'Test full demo processing pipeline'
        required: false
        default: 'true'
        type: boolean
      run_performance_tests:
        description: 'Run performance regression tests'
        required: false
        default: 'true'
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  full-system-integration:
    name: Full System Integration
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: integration_password
          POSTGRES_USER: integration_user
          POSTGRES_DB: cs2_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      qdrant:
        image: qdrant/qdrant:latest
        env:
          QDRANT__SERVICE__HTTP_PORT: 6333
          QDRANT__SERVICE__GRPC_PORT: 6334
        ports:
          - 6333:6333
          - 6334:6334

      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: testuser
          MINIO_ROOT_PASSWORD: testpassword123
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3

    env:
      DATABASE_URL: postgresql://integration_user:integration_password@localhost:5432/cs2_integration
      TIMESCALE_URL: postgresql://integration_user:integration_password@localhost:5432/cs2_integration
      REDIS_URL: redis://localhost:6379
      QDRANT_URL: http://localhost:6333
      MINIO_ENDPOINT: http://localhost:9000
      MINIO_ACCESS_KEY: testuser
      MINIO_SECRET_KEY: testpassword123

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            protobuf-compiler \
            libfontconfig1-dev \
            postgresql-client \
            redis-tools

      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version --verbose | grep release | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: true
          cache-on-failure: true
          shared-key: "fps-genie-rust-cache"
          key: ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', '**/src/**') }}
          restore-keys: |
            ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
            ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}
          target-dir: target

      - name: Wait for all services
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5432 -U integration_user; do sleep 2; done
          
          echo "Waiting for Redis..."
          until redis-cli -h localhost ping; do sleep 1; done
          
          echo "Waiting for Qdrant..."
          until curl -f http://localhost:6333/health; do sleep 1; done
          
          echo "Waiting for MinIO..."
          until curl -f http://localhost:9000/minio/health/live; do sleep 2; done
          
          echo "All services are ready!"

      - name: Initialize complete infrastructure
        run: |
          # Initialize TimescaleDB
          PGPASSWORD=integration_password psql -h localhost -U integration_user -d cs2_integration -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"
          
          # Run database initialization script
          PGPASSWORD=integration_password psql -h localhost -U integration_user -d cs2_integration -f sql/init.sql || echo "Database initialization completed"
          
          # Initialize data pipeline
          cd cs2-data-pipeline
          cargo run -- init || echo "Pipeline initialization completed"

      - name: Run comprehensive integration tests
        run: |
          # Run all integration tests with TestContainers
          cargo test --workspace --test '*' --features integration-tests --no-fail-fast
        timeout-minutes: 20

      - name: Test full demo processing pipeline
        if: ${{ github.event.inputs.test_demo_processing == 'true' || github.event_name == 'schedule' }}
        run: |
          cd cs2-data-pipeline
          
          # Test with actual demo file if available
          if [ -f "../test_data/test_demo.dem" ]; then
            echo "Testing demo processing with real demo file..."
            cargo run -- process ../test_data/test_demo.dem --max-ticks 1000
          else
            echo "No demo files available for testing"
          fi
        timeout-minutes: 15

      - name: Test ML pipeline integration
        run: |
          cd cs2-ml
          
          # Test ML components with CPU-only features
          echo "Testing ML pipeline integration..."
          cargo test --no-default-features --features cpu-only integration || echo "ML integration tests completed"
        timeout-minutes: 10

      - name: Test data analytics pipeline
        run: |
          cd cs2-analytics
          
          # Test analytics components
          echo "Testing analytics pipeline..."
          cargo test integration || echo "Analytics integration tests completed"
        timeout-minutes: 10

      - name: Validate system performance
        if: ${{ github.event.inputs.run_performance_tests == 'true' || github.event_name == 'schedule' }}
        run: |
          # Run performance benchmarks across all components
          echo "Running system performance validation..."
          cargo test --workspace --release --benches || echo "Performance tests completed"
        timeout-minutes: 20

  cross-platform-builds:
    name: Cross-Platform Build Validation
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libfontconfig1-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install protobuf pkg-config

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install protoc

      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version --verbose | grep release | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: true
          cache-on-failure: true
          shared-key: "fps-genie-rust-cache"
          key: ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', '**/src/**') }}
          restore-keys: |
            ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
            ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}
          target-dir: target

      - name: Build all workspace targets
        run: |
          cargo build --workspace --release --target ${{ matrix.target }}
        timeout-minutes: 20

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cs2-tools-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/cs2-analytics*
            target/${{ matrix.target }}/release/cs2-data-pipeline*
            target/${{ matrix.target }}/release/cs2-demo-analyzer*
            target/${{ matrix.target }}/release/cs2-ml*
            target/${{ matrix.target }}/release/csgoproto*
          retention-days: 30

  docker-integration:
    name: Docker Integration Testing
    runs-on: ubuntu-latest
    needs: cross-platform-builds

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start infrastructure services
        run: |
          # Use the existing docker-compose.yml for infrastructure
          docker compose up -d
          
          # Wait for services to be ready
          sleep 30

      - name: Build and test Docker image with infrastructure
        run: |
          # Build the main application image
          docker build -t fps-genie:integration .
          
          # Test Docker image can connect to infrastructure
          docker run --rm --network host \
            -e DATABASE_URL="postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis" \
            -e REDIS_URL="redis://localhost:6379" \
            -e QDRANT_URL="http://localhost:6333" \
            fps-genie:integration \
            cs2-data-pipeline init || echo "Docker integration test completed"

      - name: Test Docker Compose full stack
        run: |
          # Test that all services work together
          docker compose ps
          docker compose logs --tail=20

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v

  performance-regression:
    name: Performance Regression Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.run_performance_tests == 'true'
    timeout-minutes: 45

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libfontconfig1-dev

      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version --verbose | grep release | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: true
          cache-on-failure: true
          shared-key: "fps-genie-rust-cache"
          key: ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', '**/src/**') }}
          restore-keys: |
            ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
            ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}
          target-dir: target

      - name: Run performance benchmarks
        run: |
          # Run comprehensive performance benchmarks
          cargo bench --workspace --bench '*' || echo "Performance benchmarks completed"
        timeout-minutes: 30

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-regression-results
          path: target/criterion/
          retention-days: 90

      - name: Performance regression analysis
        run: |
          echo "Performance regression analysis would compare against baseline here"
          echo "TODO: Implement performance regression detection"

