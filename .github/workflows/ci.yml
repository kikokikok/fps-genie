name: CI

on:
  push:
    branches: [ main, master, dev, develop ]
  pull_request:
    branches: [ main, master, dev, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and cache the Docker image for reuse across jobs
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push test image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: test
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  # Run tests using the pre-built Docker image
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: build-image
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: cs2_password
          POSTGRES_USER: cs2_user
          POSTGRES_DB: cs2_analysis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run tests in container
        run: |
          docker run --rm \
            --network ${{ job.services.postgres.network }} \
            -e DATABASE_URL="postgresql://cs2_user:cs2_password@postgres:5432/cs2_analysis_test" \
            -e REDIS_URL="redis://redis:6379" \
            -e RUST_BACKTRACE=1 \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            ${{ needs.build-image.outputs.image }} \
            bash -c "cargo test --workspace --all-features"

  # Cargo check using Docker (fastest for syntax/compilation errors)
  check:
    name: Cargo Check
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run cargo check
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            ${{ needs.build-image.outputs.image }} \
            cargo check --workspace --all-targets --all-features

  # Clippy linting using Docker
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run clippy
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            ${{ needs.build-image.outputs.image }} \
            cargo clippy --workspace --all-targets --all-features -- -D warnings

  # Security audit
  audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            ${{ needs.build-image.outputs.image }} \
            cargo audit --deny warnings
