name: CI

on:
  push:
    branches: [ main, master, dev, develop ]
  pull_request:
    branches: [ main, master, dev, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config protobuf-compiler

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            csgoproto

      - name: Run cargo check
        run: cargo check --workspace --all-targets --all-features

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: cs2_password
          POSTGRES_USER: cs2_user
          POSTGRES_DB: cs2_analysis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
          - 6334:6334

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            csgoproto

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config protobuf-compiler

      - name: Setup database
        run: |
          # Wait for PostgreSQL to be ready
          while ! pg_isready -h localhost -p 5432 -U cs2_user; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
          
          # Create test database and extensions
          PGPASSWORD=cs2_password psql -h localhost -U cs2_user -d cs2_analysis_test -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"
        env:
          PGPASSWORD: cs2_password

      - name: Run unit tests
        run: cargo test --workspace --lib --bins
        env:
          DATABASE_URL: postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis_test
          TIMESCALE_URL: postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis_test
          REDIS_URL: redis://localhost:6379
          QDRANT_URL: http://localhost:6334

      - name: Run integration tests (with retry)
        run: |
          # Run integration tests with retry for database connections
          for i in {1..3}; do
            if cargo test --workspace --test '*' --features integration-tests; then
              break
            else
              echo "Integration tests failed, attempt $i/3"
              sleep 5
            fi
          done
        env:
          DATABASE_URL: postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis_test
          TIMESCALE_URL: postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis_test
          REDIS_URL: redis://localhost:6379
          QDRANT_URL: http://localhost:6334

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config protobuf-compiler

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            csgoproto

      - name: Run cargo clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run cargo audit
        run: cargo audit

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            csgoproto

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config protobuf-compiler

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openssl pkg-config

      - name: Build workspace
        run: cargo build --workspace --release

      - name: Upload artifacts (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: cs2-tools-linux
          path: |
            target/release/cs2-analytics
            target/release/cs2-data-pipeline
            target/release/cs2-demo-analyzer
            target/release/cs2-ml
            target/release/csgoproto

      - name: Upload artifacts (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: cs2-tools-windows
          path: |
            target/release/cs2-analytics.exe
            target/release/cs2-data-pipeline.exe
            target/release/cs2-demo-analyzer.exe
            target/release/cs2-ml.exe
            target/release/csgoproto.exe

      - name: Upload artifacts (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: cs2-tools-macos
          path: |
            target/release/cs2-analytics
            target/release/cs2-data-pipeline
            target/release/cs2-demo-analyzer
            target/release/cs2-ml
            target/release/csgoproto

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/develop')
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: cs2_password
          POSTGRES_USER: cs2_user
          POSTGRES_DB: cs2_analysis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
          - 6334:6334

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            csgoproto

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config protobuf-compiler

      - name: Setup database
        run: |
          # Wait for PostgreSQL to be ready
          while ! pg_isready -h localhost -p 5432 -U cs2_user; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
          
          # Create test database and extensions
          PGPASSWORD=cs2_password psql -h localhost -U cs2_user -d cs2_analysis_test -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"
        env:
          PGPASSWORD: cs2_password

      - name: Run benchmarks
        run: cargo bench --workspace --message-format=json | tee benchmark_output.json
        env:
          DATABASE_URL: postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis_test
          TIMESCALE_URL: postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis_test
          QDRANT_URL: http://localhost:6334

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Rust Benchmark
          tool: 'cargo'
          output-file-path: benchmark_output.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '200%'
          fail-on-alert: true

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            target/criterion/
            benchmark_output.json
          retention-days: 30

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: cs2_password
          POSTGRES_USER: cs2_user
          POSTGRES_DB: cs2_analysis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
          - 6334:6334

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config protobuf-compiler

      - name: Setup database
        run: |
          # Wait for PostgreSQL to be ready
          while ! pg_isready -h localhost -p 5432 -U cs2_user; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
          
          # Create test database and extensions
          PGPASSWORD=cs2_password psql -h localhost -U cs2_user -d cs2_analysis_test -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"
        env:
          PGPASSWORD: cs2_password

      - name: Generate code coverage
        run: cargo llvm-cov --workspace --lcov --output-path lcov.info
        env:
          DATABASE_URL: postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis_test
          TIMESCALE_URL: postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis_test
          QDRANT_URL: http://localhost:6334

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: lcov.info
          fail_ci_if_error: true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build docs
        run: cargo doc --workspace --no-deps --document-private-items

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
