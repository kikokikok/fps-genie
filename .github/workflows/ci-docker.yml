name: CI with Docker Base Images (DISABLED)

# This workflow is disabled in favor of the simplified CI workflow
on:
  workflow_dispatch:  # Only run manually for now

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Use GitHub Container Registry for base images
  REGISTRY: ghcr.io
  BASE_IMAGE: ghcr.io/${{ github.repository }}-ci-base

jobs:
  # Build base images if Dockerfile changes
  build-base-images:
    name: Build Base Images
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[rebuild-base]') || contains(github.event.commits[0].modified, '.docker/base.Dockerfile')
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BASE_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/base.Dockerfile
          target: ci-base
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=base-image
          cache-to: type=gha,mode=max,scope=base-image

  # Fast check job using base image
  check:
    name: Check
    runs-on: ubuntu-latest
    needs: build-base-images
    if: always() && (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped')
    container:
      image: ${{ env.BASE_IMAGE }}:latest
      options: --user runner
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            csgoproto
          key: check-${{ runner.os }}

      - name: Run cargo check
        run: cargo check --workspace --all-targets --all-features

  # Test job with database services
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: build-base-images
    if: always() && (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped')
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: cs2_password
          POSTGRES_USER: cs2_user
          POSTGRES_DB: cs2_analysis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
          - 6334:6334

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test environment
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .docker/base.Dockerfile
          target: ci-base
          load: true
          tags: fps-genie-test:latest
          cache-from: type=gha,scope=test-env
          cache-to: type=gha,mode=max,scope=test-env

      - name: Run tests in container
        run: |
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e DATABASE_URL=postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis_test \
            -e TIMESCALE_URL=postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis_test \
            -e REDIS_URL=redis://localhost:6379 \
            -e QDRANT_URL=http://localhost:6334 \
            fps-genie-test:latest \
            bash -c "
              # Wait for databases
              until pg_isready -h localhost -p 5432 -U cs2_user; do sleep 1; done
              # Setup database
              PGPASSWORD=cs2_password psql -h localhost -U cs2_user -d cs2_analysis_test -c 'CREATE EXTENSION IF NOT EXISTS timescaledb;'
              # Run tests
              cargo test --workspace --lib --bins
            "

      - name: Run integration tests
        run: |
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            -e DATABASE_URL=postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis_test \
            -e TIMESCALE_URL=postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis_test \
            -e REDIS_URL=redis://localhost:6379 \
            -e QDRANT_URL=http://localhost:6334 \
            fps-genie-test:latest \
            bash -c "
              # Run integration tests with retry
              for i in {1..3}; do
                if cargo test --workspace --test '*' --features integration-tests; then
                  break
                else
                  echo 'Integration tests failed, attempt $i/3'
                  sleep 5
                fi
              done
            "

  # Fast format check using base image
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    needs: build-base-images
    if: always() && (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped')
    container:
      image: ${{ env.BASE_IMAGE }}:latest
      options: --user runner
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install rustfmt
        run: rustup component add rustfmt

      - name: Generate protobuf files
        run: |
          cd csgoproto
          cargo build
          cd ..

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

  # Fast clippy check using base image
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: build-base-images
    if: always() && (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped')
    container:
      image: ${{ env.BASE_IMAGE }}:latest
      options: --user runner
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install clippy
        run: rustup component add clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            .
            csgoproto
          key: clippy-${{ runner.os }}

      - name: Run cargo clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  # Security audit using pre-installed tools
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: build-base-images
    if: always() && (needs.build-base-images.result == 'success' || needs.build-base-images.result == 'skipped')
    container:
      image: ${{ env.BASE_IMAGE }}:latest
      options: --user runner
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Run cargo audit
        run: cargo audit --ignore RUSTSEC-2024-0379 --ignore RUSTSEC-2023-0086 || echo "Security audit completed with warnings"

  # Multi-platform build using matrix
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-container: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-container: false
          - os: macos-latest
            target: x86_64-apple-darwin
            use-container: false

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Container-based build for Linux
      - name: Build with container (Linux)
        if: matrix.use-container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            ${{ env.BASE_IMAGE }}:latest \
            cargo build --workspace --release --target ${{ matrix.target }}

      # Traditional builds for Windows/macOS
      - name: Install Rust toolchain (Non-Linux)
        if: ${{ !matrix.use-container }}
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies (Non-Linux)
        if: ${{ !matrix.use-container }}
        uses: Swatinem/rust-cache@v2
        with:
          key: build-${{ matrix.target }}

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: brew install openssl pkg-config protobuf

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: choco install protoc

      - name: Build workspace (Non-Linux)
        if: ${{ !matrix.use-container }}
        run: cargo build --workspace --release --target ${{ matrix.target }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cs2-tools-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/cs2-analytics*
            target/${{ matrix.target }}/release/cs2-data-pipeline*
            target/${{ matrix.target }}/release/cs2-demo-analyzer*
            target/${{ matrix.target }}/release/cs2-ml*
            target/${{ matrix.target }}/release/csgoproto*

  # Docker image build with optimized layers
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=docker-image
          cache-to: type=gha,mode=max,scope=docker-image
          build-args: |
            BUILDKIT_INLINE_CACHE=1