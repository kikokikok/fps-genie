name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build production Docker images and binaries
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            latest

      - name: Build and push production images
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Build binary artifacts
        uses: docker/build-push-action@v5
        with:
          context: .
          target: builder
          load: true
          tags: local/fps-genie-builder:latest
          cache-from: type=gha

      - name: Extract binaries from Docker image
        run: |
          # Create artifacts directory
          mkdir -p artifacts
          
          # Extract binaries from the builder stage
          docker create --name temp-container local/fps-genie-builder:latest
          docker cp temp-container:/workspace/target/release/cs2-analytics artifacts/
          docker cp temp-container:/workspace/target/release/cs2-data-pipeline artifacts/
          docker cp temp-container:/workspace/target/release/cs2-demo-analyzer artifacts/
          docker cp temp-container:/workspace/target/release/cs2-ml artifacts/
          docker cp temp-container:/workspace/target/release/csgoproto artifacts/
          docker rm temp-container
          
          # Make binaries executable and create archives
          chmod +x artifacts/*
          cd artifacts
          tar -czf ../fps-genie-linux-amd64.tar.gz *
          cd ..

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: fps-genie-binaries
          path: |
            artifacts/
            fps-genie-linux-amd64.tar.gz

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    permissions:
      contents: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: fps-genie-binaries

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## CS2 Demo Analysis Tools ${{ github.ref_name }}
            
            ### üöÄ What's New
            - Built with Rust 1.88 for optimal performance
            - ARM64 and AMD64 support
            - All dependencies included
            
            ### üì¶ Artifacts
            - **Docker Images**: Available at `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}`
            - **Binaries**: Download the tar.gz below for Linux binaries
            
            ### üê≥ Docker Usage
            ```bash
            # Run the data pipeline
            docker run ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            
            # Run specific service
            docker run ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} cs2-analytics
            ```
            
            ### üîß Binary Usage
            ```bash
            # Extract and run
            tar -xzf fps-genie-linux-amd64.tar.gz
            ./cs2-data-pipeline --help
            ```
          files: |
            fps-genie-linux-amd64.tar.gz
          draft: false
          prerelease: false
