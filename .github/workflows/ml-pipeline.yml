name: ML Pipeline Testing (Tier 3)

on:
  push:
    paths:
      - 'cs2-ml/**'
      - '**.ipynb'
      - 'models/**'
    branches: [ main, master ]
  pull_request:
    paths:
      - 'cs2-ml/**'
      - '**.ipynb'
      - 'models/**'
  schedule:
    # Weekly ML pipeline validation
    - cron: '0 6 * * 1'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  ml-validation:
    name: ML Pipeline Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: ml_test_password
          POSTGRES_USER: ml_test_user
          POSTGRES_DB: cs2_ml_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      qdrant:
        image: qdrant/qdrant:latest
        env:
          QDRANT__SERVICE__HTTP_PORT: 6333
        ports:
          - 6333:6333

    env:
      DATABASE_URL: postgresql://ml_test_user:ml_test_password@localhost:5432/cs2_ml_test
      QDRANT_URL: http://localhost:6333

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            protobuf-compiler \
            libfontconfig1-dev \
            postgresql-client \
            python3 \
            python3-pip \
            python3-venv

      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version --verbose | grep release | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: true
          cache-on-failure: true
          shared-key: "fps-genie-rust-cache"
          key: ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', '**/src/**') }}
          restore-keys: |
            ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
            ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}
          target-dir: target

      - name: Set up Python environment
        run: |
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install jupyter notebook matplotlib seaborn pandas numpy
          echo "VIRTUAL_ENV=$(pwd)/venv" >> $GITHUB_ENV
          echo "$(pwd)/venv/bin" >> $GITHUB_PATH

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          until pg_isready -h localhost -p 5432 -U ml_test_user; do sleep 1; done
          
          echo "Waiting for Qdrant..."
          until curl -f http://localhost:6333/health; do sleep 1; done

      - name: Initialize ML test database
        run: |
          PGPASSWORD=ml_test_password psql -h localhost -U ml_test_user -d cs2_ml_test -c "CREATE EXTENSION IF NOT EXISTS timescaledb;"

      - name: Build ML components
        run: |
          # Build with CPU-only features for CI
          cargo build --release -p cs2-ml --no-default-features --features cpu-only
        timeout-minutes: 10

      - name: Test ML model training
        run: |
          cd cs2-ml
          
          # Create test data directory
          mkdir -p test_data
          
          # Test help command works
          cargo run --no-default-features --features cpu-only -- --help
          
          # Test model creation (minimal test)
          echo "Testing ML model basic functionality..."
          cargo test --no-default-features --features cpu-only --lib
        timeout-minutes: 15

      - name: Validate Jupyter notebooks (if any exist)
        run: |
          if find . -name "*.ipynb" -type f | head -1; then
            echo "Found Jupyter notebooks, validating..."
            source venv/bin/activate
          
            # Test notebook execution with nbconvert
            for notebook in $(find . -name "*.ipynb" -type f); do
              echo "Validating notebook: $notebook"
              jupyter nbconvert --to notebook --execute --inplace "$notebook" || echo "Notebook validation warning: $notebook"
            done
          else
            echo "No Jupyter notebooks found to validate"
          fi

      - name: Test behavioral analysis pipeline
        run: |
          cd cs2-ml
          
          # Test that the behavioral analysis components compile and basic functionality works
          echo "Testing behavioral analysis components..."
          cargo test --no-default-features --features cpu-only behavioral_analysis || echo "Behavioral analysis tests completed with warnings"
        timeout-minutes: 10

  ml-performance-benchmarks:
    name: ML Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 45

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libfontconfig1-dev

      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version --verbose | grep release | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: true
          cache-on-failure: true
          shared-key: "fps-genie-rust-cache"
          key: ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', '**/src/**') }}
          restore-keys: |
            ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
            ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}
          target-dir: target

      - name: Run ML performance benchmarks
        run: |
          cd cs2-ml
          
          # Run performance benchmarks with CPU-only features
          cargo bench --no-default-features --features cpu-only --bench ml_performance || echo "ML benchmarks completed"
        timeout-minutes: 30

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: ml-benchmark-results
          path: cs2-ml/target/criterion/
          retention-days: 30

  feature-compatibility:
    name: ML Feature Compatibility Testing
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            features: "cpu-only"
          - os: ubuntu-latest
            features: "cuda"
            skip-build: true  # CUDA requires special setup
          - os: macos-latest
            features: "metal"
          - os: windows-latest
            features: "cpu-only"

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler libfontconfig1-dev

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install protobuf pkg-config

      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install protoc

      - name: Get Rust version
        id: rust-version
        run: echo "version=$(rustc --version --verbose | grep release | awk '{print $2}')" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-targets: true
          cache-on-failure: true
          shared-key: "fps-genie-rust-cache"
          key: ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', '**/src/**') }}
          restore-keys: |
            ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
            ${{ runner.os }}-rust-${{ steps.rust-version.outputs.version }}
          target-dir: target

      - name: Test feature compilation
        if: ${{ !matrix.skip-build }}
        run: |
          cd cs2-ml
          cargo check --no-default-features --features ${{ matrix.features }}

      - name: Run feature-specific tests
        if: ${{ !matrix.skip-build }}
        run: |
          cd cs2-ml
          cargo test --no-default-features --features ${{ matrix.features }} --lib

