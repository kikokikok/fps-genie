#!/usr/bin/env bash

# CS2 Demo Analysis & AI Training System - Complete Local Setup
# This script sets up everything needed for E2E testing and advanced analytics

set -euo pipefail

echo "🚀 CS2 Demo Analysis System - Complete Local Setup"
echo "=================================================="

# Check prerequisites
echo "🔍 Checking prerequisites..."

need_cmd() { command -v "$1" >/dev/null 2>&1 || { echo "❌ Missing prerequisite: $1"; exit 1; }; }

need_cmd docker
need_cmd cargo
need_cmd curl

# Ensure Docker daemon is running
if ! docker info >/dev/null 2>&1; then
  echo "❌ Docker daemon not running. Please start Docker."
  exit 1
fi

# Ensure Docker Compose plugin is available
if ! docker compose version >/dev/null 2>&1; then
  echo "❌ 'docker compose' plugin not found. Please install/update Docker Desktop or the compose plugin."
  exit 1
fi

echo "✅ Prerequisites check passed"

# Step 1: Build all Rust components
echo ""
echo "🔨 Building Rust workspace (release)..."
cargo build --workspace --release
echo "✅ Rust build completed successfully"

# Step 2: Set up database infrastructure (Postgres, Qdrant, Redis, Garage)
echo ""
echo "📊 Setting up database infrastructure..."
./setup_databases.sh

# Step 3: Initialize the data pipeline
echo ""
echo "🏗️ Initializing data pipeline..."

# Core service URLs
export DATABASE_URL="${DATABASE_URL:-postgresql://cs2_user:cs2_password@localhost:5432/cs2_analysis}"
# Many clients use gRPC for Qdrant; keep both handy
export QDRANT_GRPC_URL="${QDRANT_GRPC_URL:-http://localhost:6334}"
export QDRANT_HTTP_URL="${QDRANT_HTTP_URL:-http://localhost:6333}"
export QDRANT_URL="${QDRANT_URL:-$QDRANT_GRPC_URL}"

# Source Garage credentials generated by setup_databases.sh if present
if [ -f "garage/s3-credentials.env" ]; then
  echo "🔐 Loading Garage S3 credentials from garage/s3-credentials.env"
  set -a
  # shellcheck disable=SC1091
  source garage/s3-credentials.env
  set +a
else
  echo "⚠️ Garage credentials file not found at garage/s3-credentials.env."
  echo "   If setup_databases.sh created a new key, re-run it or create credentials manually."
fi

pushd cs2-data-pipeline >/dev/null
cargo run --release -- init
popd >/dev/null

# Step 4: Run comprehensive tests
echo ""
echo "🧪 Running comprehensive test suite..."

echo "Running unit tests..."
cargo test --workspace --lib

echo "Running integration tests..."
cargo test --package cs2-integration-tests --release

echo "Running performance benchmarks..."
cargo bench --package cs2-integration-tests

# Step 5: Set up sample data for testing
echo ""
echo "📁 Setting up sample data..."

mkdir -p demos/professional demos/test_data

if [ -f "test_data/test_demo.dem" ]; then
  cp test_data/test_demo.dem demos/test_data/
  echo "✅ Copied test demo file"
fi

# Step 6: Verify the complete setup
echo ""
echo "🔍 Verifying setup..."

echo "Testing database connections..."
if cargo run --package cs2-data-pipeline --release -- stats >/dev/null 2>&1; then
  echo "✅ Database connections working"
else
  echo "⚠️ Database connection issues detected"
fi

echo "Testing ML pipeline..."
if cargo run --package cs2-ml --release -- --help >/dev/null 2>&1; then
  echo "✅ ML pipeline ready"
else
  echo "⚠️ ML pipeline issues detected"
fi

echo "Testing analytics system..."
if cargo run --package cs2-analytics --release -- --help >/dev/null 2>&1; then
  echo "✅ Analytics system ready"
else
  echo "⚠️ Analytics system issues detected"
fi

echo ""
echo "🎉 Setup Complete!"
echo "=================="
echo ""
echo "📋 What's been set up:"
echo "  ✅ PostgreSQL + TimescaleDB (time-series data)"
echo "  ✅ Qdrant Vector Database (behavioral embeddings)"
echo "  ✅ Redis Cache"
echo "  ✅ Garage Object Storage (S3-compatible)"
echo "  ✅ Complete Rust workspace built"
echo "  ✅ TestContainers integration tests"
echo "  ✅ Performance benchmarking"
echo "  ✅ Advanced analytics pipeline"
echo ""
echo "🚀 Quick Start Commands:"
echo ""
echo "1. Process demo files:"
echo "   cd cs2-data-pipeline"
echo "   cargo run -- discover --recursive"
echo "   cargo run -- process"
echo ""
echo "2. Run advanced analytics:"
echo "   cd cs2-analytics"
echo "   cargo run -- analyze --analysis-type playstyle"
echo "   cargo run -- train --model-type behavior-cloning"
echo ""
echo "3. Run comprehensive tests:"
echo "   cargo test --package cs2-integration-tests"
echo "   cargo bench --package cs2-integration-tests"
echo ""
echo "4. Generate visualizations:"
echo "   cargo run --package cs2-analytics -- visualize --input ./data --viz-type heatmap"
echo ""
echo "📊 Service URLs:"
echo "  PostgreSQL: ${DATABASE_URL}"
echo "  Qdrant gRPC: ${QDRANT_GRPC_URL}"
echo "  Qdrant HTTP: ${QDRANT_HTTP_URL}"
echo "  Garage S3:   ${AWS_ENDPOINT_URL:-http://localhost:3900} (bucket: ${S3_BUCKET:-<unset>})"
echo ""
echo "📈 Expected Performance (based on your PDF specs):"
echo "  - Demo parsing: 700MB+/s"
echo "  - Database ingestion: 10K+ snapshots/second"
echo "  - Concurrent processing: 4-8 demos simultaneously"
echo "  - Scale: Handle entire professional CS2 scene"
echo ""
echo "🔧 Troubleshooting:"
echo "  - If tests fail: Check Docker containers are running"
echo "  - If parsing fails: Verify demo file paths"
echo "  - If ML fails: Check PyTorch installation"
echo "  - For performance issues: Adjust batch sizes and concurrency"
echo ""
echo "📚 Documentation:"
echo "  - See PROJECT_CONTEXT.md for session-reusable context"
echo "  - Check individual package READMEs for detailed usage"
echo "  - Review CS2 Demo Analysis & AI Training System.pdf for architecture"