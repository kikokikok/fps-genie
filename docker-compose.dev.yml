services:
  # Main development container
  devcontainer:
    build:
      context: .
      dockerfile: .devcontainer/Dockerfile
    volumes:
      - ..:/workspace:cached
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/workspace/target
    command: sleep infinity
    networks:
      - cs2-dev-network
    depends_on:
      - timescaledb
      - redis
      - qdrant
    environment:
      - DATABASE_URL=postgresql://cs2_user:cs2_password@timescaledb:5432/cs2_analytics
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333

  # Infrastructure services (fake/test versions)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: cs2-timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_DB: cs2_analytics
      POSTGRES_USER: cs2_user
      POSTGRES_PASSWORD: cs2_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - timescale-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/001-init.sql:ro
      - ./.devcontainer/test-data:/docker-entrypoint-initdb.d/002-test-data:ro
    networks:
      - cs2-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cs2_user -d cs2_analytics"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: cs2-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - cs2-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    container_name: cs2-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
      - ./.devcontainer/qdrant-config.yaml:/qdrant/config/production.yaml:ro
    networks:
      - cs2-dev-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Analytics dashboard (optional)
  analytics-dashboard:
    image: grafana/grafana:latest
    container_name: cs2-analytics-dashboard
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./.devcontainer/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./.devcontainer/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - cs2-dev-network
    depends_on:
      - timescaledb

  # Jupyter notebook service for ML experimentation
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: cs2-jupyter
    restart: unless-stopped
    ports:
      - "8890:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=cs2analysis
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./test_data:/home/jovyan/work/test_data
      - jupyter-data:/home/jovyan/.jupyter
    networks:
      - cs2-dev-network

volumes:
  timescale-data:
  redis-data:
  qdrant-data:
  grafana-data:
  jupyter-data:
  cargo-cache:
  target-cache:

networks:
  cs2-dev-network:
    driver: bridge
